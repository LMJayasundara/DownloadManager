name: Build and Package Electron App

on:
  push:
    branches:
      - main

jobs:
  build:
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4  # Updated to the latest version

      - name: Set up Node.js
        uses: actions/setup-node@v4  # Updated to the latest version
        with:
          node-version: '20'  # Specify Node.js 20

      - name: Cache node modules
        uses: actions/cache@v4  # Updated to the latest version
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm install

      - name: Install electron-builder
        run: npm install electron-builder --save-dev

      - name: Build and package Electron app
        run: |
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            npm run build:mac
          elif [[ "$RUNNER_OS" == "Linux" ]]; then
            npm run build:linux
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
            npm run build:win
          fi
        shell: bash

      # - name: Delete Old Artifacts
      #   uses: actions/github-script@v6
      #   id: artifact
      #   with:
      #     script: |
      #       const res = await github.rest.actions.listArtifactsForRepo({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #       })

      #       res.data.artifacts
      #         .forEach(({ id }) => {
      #           github.rest.actions.deleteArtifact({
      #             owner: context.repo.owner,
      #             repo: context.repo.repo,
      #             artifact_id: id,
      #           })
      #         })

      - name: Upload artifact
        uses: actions/upload-artifact@v3  # Ensure we are using the latest version
        with:
          name: Play-Downloader-${{ matrix.os }}
          path: dist/

      # - name: Upload artifact to cPanel server
      #   env:
      #     USER: ${{ secrets.CPANEL_USER }}
      #     HOST: ${{ secrets.CPANEL_HOST }}
      #     REMOTE_DIR: ${{ secrets.CPANEL_REMOTE_DIR }}
      #     SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      #   run: |
      #     echo "${SSH_PRIVATE_KEY}" > private_key
      #     chmod 600 private_key
      #     scp -i private_key Play-Downloader-${{ matrix.os }}.zip ${USER}@${HOST}:${REMOTE_DIR}
      #   shell: bash